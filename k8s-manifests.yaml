---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: trip-optimizer
  labels:
    name: trip-optimizer

---
# ConfigMap for Backend
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: trip-optimizer
data:
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  API_URL: "http://backend-service:8000"
  FRONTEND_URL: "http://frontend-service:3000"
  PYTHON_ENV: "production"
  JWT_ALGORITHM: "HS256"
  JWT_EXPIRE_MINUTES: "30"
  REDIS_URL: "redis://redis-service:6379"
  MONGODB_URL: "mongodb://mongodb-service:27017/trip_optimizer"
  AWS_REGION: "us-east-1"
  S3_BUCKET: "trip-optimizer-documents"

---
# ConfigMap for Frontend
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: trip-optimizer
data:
  FRONTEND_HOST: "0.0.0.0"
  FRONTEND_PORT: "3000"
  FRONTEND_URL: "http://frontend-service:3000"
  NEXT_PUBLIC_API_URL: "http://backend-service:8000"
  NODE_ENV: "production"
  NEXT_PUBLIC_APP_NAME: "Trip Optimizer"
  NEXT_PUBLIC_APP_VERSION: "1.0.0"
  NEXT_PUBLIC_ENABLE_ANALYTICS: "false"
  NEXT_PUBLIC_ENABLE_DEBUG: "false"

---
# ConfigMap for Storage API
apiVersion: v1
kind: ConfigMap
metadata:
  name: storage-api-config
  namespace: trip-optimizer
data:
  API_HOST: "0.0.0.0"
  API_PORT: "8001"
  PYTHON_ENV: "production"
  AWS_REGION: "us-east-1"
  S3_BUCKET_NAME: "dharmendra-ps"
  UPLOAD_PATH: "uploads/"
  MAX_FILE_SIZE: "10485760"
  ALLOWED_FILE_TYPES: "pdf,jpg,jpeg,png,doc,docx,txt"
  CORS_ORIGINS: "*"
  CORS_METHODS: "GET,POST,PUT,DELETE"
  CORS_HEADERS: "*"

---
# Secrets for Backend
apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
  namespace: trip-optimizer
type: Opaque
data:
  # Base64 encoded values - replace with your actual values
  # To encode: echo -n "your-secret-value" | base64
  JWT_SECRET_KEY: ZGV2LXNlY3JldC1rZXktY2hhbmdlLWluLXByb2R1Y3Rpb24=  # dev-secret-key-change-in-production
  AWS_ACCESS_KEY_ID: eW91ci1kZXYtYXdzLWFjY2Vzcy1rZXk=  # your-dev-aws-access-key
  AWS_SECRET_ACCESS_KEY: eW91ci1kZXYtYXdzLXNlY3JldC1rZXk=  # your-dev-aws-secret-key
  MONGODB_USERNAME: dXNlcg==  # user
  MONGODB_PASSWORD: cGFzc3dvcmQ=  # password

---
# Secrets for Frontend
apiVersion: v1
kind: Secret
metadata:
  name: frontend-secrets
  namespace: trip-optimizer
type: Opaque
data:
  # Base64 encoded values - replace with your actual values
  # To encode: echo -n "your-secret-value" | base64
  NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: eW91ci1kZXYtZ29vZ2xlLW1hcHMta2V5  # your-dev-google-maps-key
  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: eW91ci1kZXYtc3RyaXBlLWtleQ==  # your-dev-stripe-key

---
# Secrets for Storage API
apiVersion: v1
kind: Secret
metadata:
  name: storage-api-secrets
  namespace: trip-optimizer
type: Opaque
data:
  # Base64 encoded values - replace with your actual values
  # To encode: echo -n "your-secret-value" | base64
  AWS_ACCESS_KEY_ID: eW91ci1kZXYtYXdzLWFjY2Vzcy1rZXk=  # your-dev-aws-access-key
  AWS_SECRET_ACCESS_KEY: eW91ci1kZXYtYXdzLXNlY3JldC1rZXk=  # your-dev-aws-secret-key
  AWS_SESSION_TOKEN: ""  # Optional: for temporary credentials

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: trip-optimizer
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: redis-data
        emptyDir: {}

---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: trip-optimizer
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: MONGODB_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: MONGODB_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: "trip_optimizer"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        livenessProbe:
          tcpSocket:
            port: 27017
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mongodb-data
        emptyDir: {}

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: trip-optimizer
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: trip-optimizer-backend:latest
        imagePullPolicy: Never  # Use local image in Minikube
        ports:
        - containerPort: 8000
        env:
        - name: API_HOST
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: API_HOST
        - name: API_PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: API_PORT
        - name: API_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: API_URL
        - name: FRONTEND_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: FRONTEND_URL
        - name: PYTHON_ENV
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: PYTHON_ENV
        - name: JWT_ALGORITHM
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: JWT_ALGORITHM
        - name: JWT_EXPIRE_MINUTES
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: JWT_EXPIRE_MINUTES
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: REDIS_URL
        - name: MONGODB_URL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: MONGODB_URL
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: AWS_REGION
        - name: S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: S3_BUCKET
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: JWT_SECRET_KEY
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: AWS_SECRET_ACCESS_KEY
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Storage API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storage-api
  namespace: trip-optimizer
  labels:
    app: storage-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: storage-api
  template:
    metadata:
      labels:
        app: storage-api
    spec:
      containers:
      - name: storage-api
        image: trip-optimizer-storage-api:latest
        imagePullPolicy: Never  # Use local image in Minikube
        ports:
        - containerPort: 8001
        env:
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: API_HOST
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: API_PORT
        - name: PYTHON_ENV
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: PYTHON_ENV
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: AWS_REGION
        - name: S3_BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: S3_BUCKET_NAME
        - name: UPLOAD_PATH
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: UPLOAD_PATH
        - name: MAX_FILE_SIZE
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: MAX_FILE_SIZE
        - name: ALLOWED_FILE_TYPES
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: ALLOWED_FILE_TYPES
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: CORS_ORIGINS
        - name: CORS_METHODS
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: CORS_METHODS
        - name: CORS_HEADERS
          valueFrom:
            configMapKeyRef:
              name: storage-api-config
              key: CORS_HEADERS
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: storage-api-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: storage-api-secrets
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_SESSION_TOKEN
          valueFrom:
            secretKeyRef:
              name: storage-api-secrets
              key: AWS_SESSION_TOKEN
              optional: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: trip-optimizer
  labels:
    app: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: trip-optimizer-frontend:latest
        imagePullPolicy: Never  # Use local image in Minikube
        ports:
        - containerPort: 3000
        env:
        - name: FRONTEND_HOST
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: FRONTEND_HOST
        - name: FRONTEND_PORT
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: FRONTEND_PORT
        - name: FRONTEND_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: FRONTEND_URL
        - name: NEXT_PUBLIC_API_URL
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_PUBLIC_API_URL
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NODE_ENV
        - name: NEXT_PUBLIC_APP_NAME
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_PUBLIC_APP_NAME
        - name: NEXT_PUBLIC_APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_PUBLIC_APP_VERSION
        - name: NEXT_PUBLIC_ENABLE_ANALYTICS
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_PUBLIC_ENABLE_ANALYTICS
        - name: NEXT_PUBLIC_ENABLE_DEBUG
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: NEXT_PUBLIC_ENABLE_DEBUG
        - name: NEXT_PUBLIC_GOOGLE_MAPS_API_KEY
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: NEXT_PUBLIC_GOOGLE_MAPS_API_KEY
        - name: NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
          valueFrom:
            secretKeyRef:
              name: frontend-secrets
              key: NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: trip-optimizer
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: redis

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: trip-optimizer
  labels:
    app: mongodb
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: mongodb
  selector:
    app: mongodb

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: trip-optimizer
  labels:
    app: backend
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: backend

---
# Storage API Service
apiVersion: v1
kind: Service
metadata:
  name: storage-api-service
  namespace: trip-optimizer
  labels:
    app: storage-api
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: http
  selector:
    app: storage-api

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: trip-optimizer
  labels:
    app: frontend
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: frontend

---
# Ingress for External Access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: trip-optimizer-ingress
  namespace: trip-optimizer
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: trip-optimizer.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8000
      - path: /storage-api
        pathType: Prefix
        backend:
          service:
            name: storage-api-service
            port:
              number: 8001
