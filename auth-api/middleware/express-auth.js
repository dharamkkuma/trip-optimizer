const jwt = require('jsonwebtoken');

/**
 * JWT Authentication Middleware for Express.js APIs
 * This middleware validates JWT tokens generated by the Auth API
 */

const authenticateToken = (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Access token required',
        error: 'MISSING_TOKEN'
      });
    }

    const secretKey = process.env.JWT_SECRET_KEY;
    if (!secretKey) {
      console.error('JWT_SECRET_KEY environment variable is not set');
      return res.status(500).json({
        success: false,
        message: 'Server configuration error',
        error: 'MISSING_JWT_SECRET'
      });
    }

    const decoded = jwt.verify(token, secretKey, {
      algorithms: [process.env.JWT_ALGORITHM || 'HS256']
    });

    // Add user info to request object
    req.user = decoded;
    req.userId = decoded.userId;
    req.userRole = decoded.role;
    req.userEmail = decoded.email;
    req.username = decoded.username;

    next();
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({
        success: false,
        message: 'Token has expired',
        error: 'TOKEN_EXPIRED'
      });
    } else if (error.name === 'JsonWebTokenError') {
      return res.status(403).json({
        success: false,
        message: 'Invalid token',
        error: 'INVALID_TOKEN'
      });
    } else {
      console.error('JWT verification error:', error);
      return res.status(403).json({
        success: false,
        message: 'Token verification failed',
        error: 'TOKEN_VERIFICATION_FAILED'
      });
    }
  }
};

/**
 * Role-based authorization middleware
 * @param {string|Array} allowedRoles - Role(s) that are allowed to access the route
 */
const requireRole = (allowedRoles) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: 'Authentication required',
        error: 'AUTHENTICATION_REQUIRED'
      });
    }

    const userRole = req.userRole;
    const roles = Array.isArray(allowedRoles) ? allowedRoles : [allowedRoles];

    if (!roles.includes(userRole)) {
      return res.status(403).json({
        success: false,
        message: 'Insufficient permissions',
        error: 'INSUFFICIENT_PERMISSIONS',
        requiredRoles: roles,
        userRole: userRole
      });
    }

    next();
  };
};

/**
 * Optional authentication middleware
 * Validates token if present but doesn't require it
 */
const optionalAuth = (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (token) {
      const secretKey = process.env.JWT_SECRET_KEY;
      if (secretKey) {
        const decoded = jwt.verify(token, secretKey, {
          algorithms: [process.env.JWT_ALGORITHM || 'HS256']
        });
        req.user = decoded;
        req.userId = decoded.userId;
        req.userRole = decoded.role;
        req.userEmail = decoded.email;
        req.username = decoded.username;
      }
    }
    next();
  } catch (error) {
    // For optional auth, we don't fail on token errors
    next();
  }
};

/**
 * Extract user ID from token without full verification
 * Useful for logging or basic user identification
 */
const extractUserInfo = (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (token) {
      // Decode without verification (for logging purposes)
      const decoded = jwt.decode(token);
      if (decoded) {
        req.userId = decoded.userId;
        req.username = decoded.username;
        req.userEmail = decoded.email;
      }
    }
    next();
  } catch (error) {
    next();
  }
};

module.exports = {
  authenticateToken,
  requireRole,
  optionalAuth,
  extractUserInfo
};
